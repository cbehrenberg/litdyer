def defaultBranch = 'dev'
def target_branch = ''

pipeline {
    parameters {
        gitParameter(name: 'branch', branchFilter: 'origin/(.*)', defaultValue: defaultBranch, type: 'PT_BRANCH', description: "writio branch to release from")
        string(name: "version", defaultValue: "", description: "writio release version")
        credentials(name: 'credentials', credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl', description: 'writio GitHub credentials', required: true)
        booleanParam(name: 'parameterization', defaultValue: false, description: 'If checked, a dry run is performed to initialize parameters')
    }
    options {
        disableConcurrentBuilds()
    }
    agent any
    stages {
        stage('parameterization') {
			when {
				expression { true }
			}
            steps {
                script {
				
                    if ("${params.parameterization}" == 'true') {
                        currentBuild.result = 'aborted'
                        error('dry run completed, job parameterized')
                    }
					
					if (!(params.branch?.trim())) { error("Build failed because source branch is not selected!")}
					if (!(params.version?.trim())) { error("Build failed because no release version was provided!")}
                }
            }
        }
        stage('build source branch') {
			when {
				expression { false }
			}
            steps {

				// clean
                step([$class: 'WsCleanup'])

				// clone
				withCredentials([usernamePassword(credentialsId: "${params.credentials}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
					echo "cloning git source branch '${params.branch}'..."
					git branch: "${params.branch}", credentialsId: "${params.credentials}", changelog: false, poll: false, url: "https://${USERNAME}:${PASSWORD}@github.com/cbehrenberg/writio.git"
				}

				// build
				echo "building source branch '${params.branch}'..."
                sh 'mvn clean install'
            }
        }
        stage('create release branch') {
            when {
                expression { false }
            }
            steps {
                script {

					target_branch="release/${params.version}"
					message="create release branch for version ${params.version}"

					echo "switching to branch ${target_branch} for release..."
					sh "git checkout -b ${target_branch} ${params.branch}"
					
					echo "switching maven version ${params.version}..."
					sh "mvn versions:set -DnewVersion=${params.version} -DgenerateBackupPoms=false"
					
					echo "switching latest to specific version ${version} for container yamls..."
					sh "sed -i \"s/latest/${params.version}/g\" ./ci/.env"
					sh "cat ./ci/.env"

					echo "comitting changes locally..."
					sh "git commit -a -m \"${message}\""					
                }
            }
        }
        stage('build release branch') {
			when {
				expression { false }
			}
            steps {
				// build
				echo "building release branch '${params.branch}'..."
                sh 'mvn clean install'
            }
        }
        stage('push release branch') {
            when {
                expression { false }
            }
            steps {
                script {
					withCredentials([usernamePassword(credentialsId: "${params.credentials}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
						echo "pushing changes to remote..."						
						sh "git push -f origin \"${target_branch}\""
					}
                }
            }
        }
        stage('creating tag') {
            when {
                expression { false }
            }
            steps {
                script {
					withCredentials([usernamePassword(credentialsId: "${params.credentials}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
						
						echo "creating remote git tag ${params.version}..."						
						
						sh "git tag -m \"${message}\" \"${params.version}\""
						sh "git push origin \"${params.version}\""
					}
                }
            }
        }
        stage('deleting release branch') {
            when {
                expression { false }
            }
            steps {
                script {
					withCredentials([usernamePassword(credentialsId: "${params.credentials}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
						
						echo "deleting remote release branch..."						
						sh "git push origin --delete \"${target_branch}\""
					}
                }
            }
        }
        stage('build and deploy tag') {
			when {
				expression { true }
			}
            steps {

				// clean
                step([$class: 'WsCleanup'])

				// clone
				withCredentials([usernamePassword(credentialsId: "${params.credentials}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
					echo "cloning git tag '${params.version}'..."
					git branch: "refs/tags/${params.version}", credentialsId: "${params.credentials}", changelog: false, poll: false, url: "https://${USERNAME}:${PASSWORD}@github.com/cbehrenberg/writio.git"
				}

				// build
				echo "building and deploying tag '${params.version}'..."
                sh 'mvn clean deploy'
            }
        }
    }
}