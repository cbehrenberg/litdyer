def repositoryUrl = 'https://github.com/cbehrenberg/writio.git'
def defaultBranch = 'dev'

pipeline {
    parameters {
        gitParameter(branchFilter: 'origin/(.*)', defaultValue: defaultBranch, name: 'branch', type: 'PT_BRANCH', description: "writio branch to release from")
        string(name: "version", defaultValue: "<version>", description: "writio release version")
        credentials(name: 'credentials', credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl', description: 'writio GitHub credentials', required: true)
        booleanParam(name: 'parameterization', defaultValue: false, description: 'If checked, a dry run is performed to initialize parameters')
    }
    options {
        disableConcurrentBuilds()
    }
    agent any
    stages {
        stage('parameterization') {
            steps {
                script {
                    if ("${params.parameterization}" == 'true') {
                        currentBuild.result = 'aborted'
                        error('dry run completed, job parameterized')
                    }
                }
            }
        }
        stage('clean') {
            steps {
                step([$class: 'WsCleanup'])
            }
        }
        stage('clone') {
            steps {
                echo "cloning git branch '${params.branch}'..."
                git branch: "${params.branch}", credentialsId: "${params.credentials}", changelog: false, poll: false, url: repositoryUrl
            }
        }
        stage('build branch') {
            when {
                expression { false }
            }
            steps {
                sh 'mvn clean install'
            }
        }
        stage('create release branch') {
            when {
                expression { true }
            }
            steps {
                script {

                    target_branch="release/${params.version}"
                    message="create release branch for version ${params.version}"

                    echo "switching to branch ${target_branch} for release..."
                    sh "git checkout -b ${target_branch} ${params.branch}"
                    
                    echo "switching maven version ${params.version}..."
                    sh "mvn versions:set -DnewVersion=${params.version} -DgenerateBackupPoms=false"
                    
                    echo "switching latest to specific version ${version} for container yamls..."
                    sh "sed -i \"s/latest/${params.version}/g\" ./ci/.env"
                    sh "cat ./ci/.env"

                    echo "comitting changes..."
                    sh "git commit -a -m \"${message}\""
                }
            }
        }
    }
}