def repositoryUrl = 'https://github.com/cbehrenberg/writio.git'
def defaultBranch = 'dev'

pipeline {
    parameters {
        gitParameter(name: 'branch', branchFilter: 'origin/(.*)', defaultValue: defaultBranch, type: 'PT_BRANCH', description: "writio branch to release from")
        string(name: "version", defaultValue: "", description: "writio release version")
        string(name: "name", defaultValue: "", description: "Firstname Lastname")
        string(name: "email", defaultValue: "", description: "Your email address")
        credentials(name: 'credentials', credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl', description: 'writio GitHub credentials', required: true)
        booleanParam(name: 'parameterization', defaultValue: false, description: 'If checked, a dry run is performed to initialize parameters')
    }
    options {
        disableConcurrentBuilds()
    }
    agent any
    stages {
        stage('parameterization') {
            steps {
                script {
				
                    if ("${params.parameterization}" == 'true') {
                        currentBuild.result = 'aborted'
                        error('dry run completed, job parameterized')
                    }
					
					if (!(params.branch?.trim())) { error("Build failed because source branch is not selected!")}
					if (!(params.version?.trim())) { error("Build failed because no release version was provided!")}
					if (!(params.name?.trim())) { error("Build failed because no name was provided!")}
					if (!(params.email?.trim())) { error("Build failed because no email was provided!")}
                }
            }
        }
        stage('preparation') {
            steps {
                script {
                    
					echo "setting name and email..."
                    sh "git config --global user.name \"${params.name}\""
                    sh "git config --global user.email ${params.email}"
					
					withCredentials([usernameColonPassword(credentialsId: "${params.credentials}", variable: 'GITHUB_CREDENTIALS')]) {
						wrap([$class: 'MaskPasswordsBuildWrapper', varPasswordPairs: [[password: java.net.URLEncoder.encode("${GITHUB_CREDENTIALS}", "UTF-8"), var: 'GITHUB_CREDENTIALS_ENC']]]) {
							repositoryUrl = "https://${GITHUB_CREDENTIALS}@github.com/cbehrenberg/writio.git"
						}
					}
				}
            }
        }
        stage('build source branch') {
            steps {

				// clean
                step([$class: 'WsCleanup'])

				// clone
				withCredentials([usernameColonPassword(credentialsId: "${params.credentials}", variable: 'GITHUB_CREDENTIALS')]) {
					echo "cloning git source branch '${params.branch}'..."
					git branch: "${params.branch}", credentialsId: "${params.credentials}", changelog: false, poll: false, url: repositoryUrl
				}

				// build
				echo "building source branch '${params.branch}'..."
                sh 'mvn clean install'
            }
        }
        stage('create release branch') {
            when {
                expression { true }
            }
            steps {
                script {
					withCredentials([usernameColonPassword(credentialsId: "${params.credentials}", variable: 'GITHUB_CREDENTIALS')]) {
                    
						target_branch="release/${params.version}"
						message="create release branch for version ${params.version}"

						echo "switching to branch ${target_branch} for release..."
						sh "git checkout -b ${target_branch} ${params.branch}"
						
						echo "switching maven version ${params.version}..."
						sh "mvn versions:set -DnewVersion=${params.version} -DgenerateBackupPoms=false"
						
						echo "switching latest to specific version ${version} for container yamls..."
						sh "sed -i \"s/latest/${params.version}/g\" ./ci/.env"
						sh "cat ./ci/.env"

						echo "comitting changes locally..."
						sh "git commit -a -m \"${message}\""
						
						echo "pushing changes to remote..."
						
						sh "git push origin \"${target_branch}\""
					}
                }
            }
        }
        stage('build release branch') {
            steps {

				// clean
                step([$class: 'WsCleanup'])

				// clone
				withCredentials([usernameColonPassword(credentialsId: "${params.credentials}", variable: 'GITHUB_CREDENTIALS')]) {
					echo "cloning git release branch '${target_branch}'..."
					git branch: "${target_branch}", credentialsId: "${params.credentials}", changelog: false, poll: false, url: repositoryUrl
				}

				// build
				echo "building release branch '${params.branch}'..."
                sh 'mvn clean install'
            }
        }
    }
}