def writio = null
def authRepositoryUrl = null
def target_branch = null
def remote_branch_created = false

pipeline {
    parameters {
        gitParameter(name: 'branch', branchFilter: 'origin/(.*)', defaultValue: "dev", type: 'PT_BRANCH', description: "writio branch to release from")
        string(name: "version", defaultValue: "", description: "writio release version")
        credentials(name: 'git_credentials', credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl', description: 'writio GitHub credentials', required: true)
        credentials(name: 'docker_credentials', credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl', description: 'writio DockerHub credentials', required: true)
        booleanParam(name: 'do_build', defaultValue: true, description: 'If checked, source branch and modified branch are build before proceeding')
        booleanParam(name: 'do_deploy_tag', defaultValue: true, description: 'If checked, container images are pushed to docker.io')
        booleanParam(name: 'do_delete_branch', defaultValue: true, description: 'If checked, release branch is deleted')
        booleanParam(name: 'parameterization', defaultValue: false, description: 'If checked, a dry run is performed to initialize parameters')
    }
    options {
        disableConcurrentBuilds()
    }
    agent any
    stages {
        stage('initialize') {
            when {
                expression { true }
            }
            steps {
                script {

                    step([$class: 'WsCleanup'])

                    configFileProvider([configFile(fileId: "writio-config", variable: 'WRITIO_CONFIG')]) {
                        writio = readJSON file: "${env.WRITIO_CONFIG}"
                    }

                    if ("${params.parameterization}" == 'true') {
                        currentBuild.result = 'aborted'
                        error('dry run completed, job parameterized')
                    }
					
					if (!(params.branch?.trim())) { error("Build failed because source branch is not selected!")}
					if (!(params.version?.trim())) { error("Build failed because no release version was provided!")}
					
					withCredentials([usernamePassword(credentialsId: "${params.git_credentials}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {

						sh "git config --global credential.helper cache"
						sh "git config --global user.name \"${USERNAME}\""
						
						authRepositoryUrl = writio.authRepositoryUrl.replace("<credential>", "${USERNAME}:${PASSWORD}")
					}
					
					target_branch="release/${params.version}"
                }
            }
        }   
        stage('clone source') {
			when {
				expression { true }
			}
            steps {
				withCredentials([usernamePassword(credentialsId: "${params.git_credentials}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
					git branch: "${params.branch}", credentialsId: "${params.git_credentials}", changelog: false, poll: false, url: authRepositoryUrl
				}
            }
        }
        stage('build source') {
			when {
				expression { params.do_build }
			}
            steps {
				sh "mvn clean install"
            }
        }
        stage('modify source') {
            when {
                expression { true }
            }
            steps {
                script {					
					message="create release branch for version ${params.version}"
					sh "git checkout -b ${target_branch} ${params.branch}"
					sh "mvn versions:set -DnewVersion=${params.version} -DgenerateBackupPoms=false"
					sh "sed -i \"s/latest/${params.version}/g\" ./ci/.env"
					sh "git commit -a -m \"${message}\""
                }
            }
        }
        stage('build modified') {
			when {
				expression { params.do_build }
			}
            steps {
                sh "mvn clean install"
            }
        }
        stage('archive') {
            when {
				// attach artifacts does only make sense, if we built something before
                expression { params.do_build }
            }
            steps {
                archiveArtifacts artifacts: 'api/target/classes/writio*.proto', fingerprint: true
                archiveArtifacts artifacts: 'app/epub-json-file/target/epub-json-file*.jar', fingerprint: true
            }
        }
        stage('push modified') {
            when {
                expression { true }
            }
            steps {
                script {
					withCredentials([usernamePassword(credentialsId: "${params.git_credentials}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
						sh "git push -f origin ${target_branch}"
						remote_branch_created = true
					}
                }
            }
        }
        stage('tag modified') {
            when {
                expression { true }
            }
            steps {
                script {
					withCredentials([usernamePassword(credentialsId: "${params.git_credentials}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
						sh "git tag -m \"${message}\" ${params.version}"
					}
                }
            }
        }
        stage('push tag') {
            when {
                expression { true }
            }
            steps {
                script {
					withCredentials([usernamePassword(credentialsId: "${params.git_credentials}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
						sh "git push origin ${params.version}"
					}
                }
            }
        }
        stage('deploy tag') {
			when {
				expression { params.do_deploy_tag }
			}
            steps {
                script {
					withCredentials([usernamePassword(credentialsId: "${params.docker_credentials}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
						sh "mvn -s ./ci/jobs/writio-release-branch/settings.xml deploy -Ddocker.io.username=${USERNAME} -Ddocker.io.password=${PASSWORD}"
					}
                }
            }
        }
        stage('set master to tag') {
			when {
				expression { true }
			}
            steps {
				withCredentials([usernamePassword(credentialsId: "${params.git_credentials}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {

					sh "git fetch origin"

					sh "git checkout origin/master"
					sh "git checkout master"

					sh "git reset --hard ${params.version}"
				}
            }
        }
        stage('push master') {
			when {
				expression { true }
			}
            steps {
				withCredentials([usernamePassword(credentialsId: "${params.git_credentials}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
					sh "git push --force origin master"
				}
            }
        }
    }
	post {
        always {
			script {
				if (params.do_delete_branch && remote_branch_created) {
					withCredentials([usernamePassword(credentialsId: "${params.git_credentials}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
						sh "git push origin --delete ${target_branch}"
					}
				}
			}
        }
    }
}