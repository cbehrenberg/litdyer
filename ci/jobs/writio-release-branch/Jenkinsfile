def repositoryUrl = 'https://github.com/cbehrenberg/writio.git'
def defaultBranch = 'dev'

pipeline {
    parameters {
        gitParameter(branchFilter: 'origin/(.*)', defaultValue: defaultBranch, name: 'branch', type: 'PT_BRANCH', description: "writio branch to release from")
        string(name: "version", defaultValue: "<version>", description: "writio release version")
        credentials(name: 'credentials', credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl', description: 'writio GitHub credentials', required: true)
        booleanParam(name: 'parameterization', defaultValue: false, description: 'If checked, a dry run is performed to initialize parameters')
    }
    options {
        disableConcurrentBuilds()
    }
    agent none
    stages {
        stage('parameterization') {
            steps {
                script {
                    if ("${params.parameterization}" == 'true') {
                        currentBuild.result = 'aborted'
                        error('dry run completed, job parameterized')
                    }
                }
            }
        }
        stage('clone') {
            steps {
                echo "cloning git branch '${params.branch}'..."
                git branch: "${params.branch}", credentialsId: "${params.credentials}", changelog: false, poll: false, url: repositoryUrl
            }
        }
        stage('build branch') {
            agent {
                docker {
                    image "maven:amazoncorretto"
                    args "-v writio_ci_maven_repository:/root/.m2/repository"
                    reuseNode true
                }
            }
            when {
                expression { false }
            }
            steps {
                sh 'mvn clean install'
            }
        }
        stage('create release branch') {
            agent {
                docker {
                    image "alpine/git:latest"
                    reuseNode true
                }
            }
            when {
                expression { true }
            }
            steps {
                script {
                    target_branch="release/${params.version}"
                    sh "git status"
                    sh "git checkout -b ${target_branch} ${params.branch}"
                    sh "git status"
                }
            }
        }
    }
}